apply plugin: 'com.android.application'

//指定基准文件存放位置
def bakPath = file("${rootDir}/bakApk")

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.hs.test002"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        // Specifies a flavor dimension.
        flavorDimensions "versionCode"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        multiDexEnabled true
        manifestPlaceholders = [
                JPUSH_APPKEY : "ab61280f017e6a1446cbde40",//值来自开发者平台取得的AppKey
                JPUSH_CHANNEL: "default_developer",
                UMENG_APPKEY : "5e703210895cca49600001b3",//值来自开发者平台取得的AppKey
        ]
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        debug {
            storeFile file('mytest.jks')
            storePassword 'test123456'
            keyAlias = 'key0'
            keyPassword 'test123456'
        }
        release {
            storeFile file('mytest.jks')
            storePassword 'test123456'
            keyAlias = 'key0'
            keyPassword 'test123456'
        }
    }

    productFlavors {
        googleplayer {
            dimension "versionCode"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "googleplayer"]
        }
        baidu {
            dimension "versionCode"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    /*    //Tinker集成第一步
        //生成application使用
        compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
        annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") //不添加这句会出现Annotation processors must be explicitly declared now. 编译错误
        //tinker的核心sdk库
        implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}")*/
    implementation project(path: ':fixlib')
    //    implementation('com.android.support:multidex:1.0.1')
    implementation files('libs/jcore-android-2.1.6.jar')
    implementation files('libs/jpush-android-3.3.8.jar')

    //友盟集成
    implementation  'com.umeng.umsdk:analytics:8.0.0'
    implementation  'com.umeng.umsdk:common:2.0.0'
    implementation  'com.umeng.umsdk:utdid:1.1.5.3'
}

ext {
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/tinkertest-0317-15-50-00"
    tinkerID = "1.0"
    tinkerApplyMappingPath = "${bakPath}/tinkertest-0317-15-50-00"
    tinkerApplyResourceMappingPath = "${bakPath}/tinkertest-0317-15-50-00"
    tinkerBuildFlavorDirectory = "${bakPath}/tinkertest-0317-15-50-00"
}

def buildWithTinker() {
    return ext.tinkerEnable
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourceMappingPath
}

def getTinkerIdValue() {
    return ext.tinkerID;
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory;
}

if (buildWithTinker()) {
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'

    //所有tinker相关的参数
    tinkerPatch {
        //指定old apk文件路径
        oldApk = getOldApkPath()

        //不忽略tinker的警告，有则中止patch文件的生成
        ignoreWarning = true

        //强制patch文件也使用签名
        useSign = true

        //指定是否启用tinker
        tinkerEnable = buildWithTinker();

        buildConfig {
            //指定old apk打包时所使用的混淆文件
            applyMapping = getApplyMappingPath()

            //指定old apk的资源文件
            applyResourceMapping = getApplyResourceMappingPath()

            //指定tinkerID
            tinkerId = getTinkerIdValue()

            keepDexApply = false
        }

        dex {
            dexMode = "jar" //jar, raw
            //指定dex文件目录
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]

            //指定加载patch文件时用到的类
            loader = ["com.example.tinkertest.tinker.MyTinkerApplication"];
        }

        lib {
            pattern = ["libs/*/*.so"]
        }

        res {
            //指定tinker可以修改的资源文件路径
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            //指定不受影响的资源路径
            ignoreChange = ["assets/sample_meta.txt"]

            //资源修改大小默认值
            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "fix the 1.0 version's bugs")
            configField("patchVersion", "1.0")
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     * 复制基准包和其他必须文件到指定目录
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath

                        if (variant.metaClass.hasProperty(variant, 'packageApplicationProvider')) {
                            def packageAndroidArtifact = variant.packageApplicationProvider.get()
                            if (packageAndroidArtifact != null) {
                                try {
                                    from new File(packageAndroidArtifact.outputDirectory.getAsFile().get(), variant.outputs.first().apkData.outputFileName)
                                } catch (Exception e) {
                                    from new File(packageAndroidArtifact.outputDirectory, variant.outputs.first().apkData.outputFileName)
                                }
                            } else {
                                from variant.outputs.first().mainOutputFile.outputFile
                            }
                        } else {
                            from variant.outputs.first().outputFile
                        }

                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        from "${buildDir}/intermediates/symbol_list/${variant.dirName}/R.txt"
                        from "${buildDir}/intermediates/runtime_symbol_list/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }

    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
                    }
                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }
                }
            }
        }
    }
}